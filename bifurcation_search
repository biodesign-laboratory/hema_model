# Attempt at implementing bifurcation analysis in Python George VanVeckhoven
import matplotlib.pyplot as plt
import numpy as np
import project_library as PL
import time
# import M2_beta
import pandas as pd
from pathlib import Path
run_number = 'debug'      # used in file names

runs = 1
delta_t = 0.01
t_final = 672       # 672 hours = 4 weeks
num_outputs = 11
bDerivatives = False
#bDebug = True
graph_derivatives = False

timesteps = np.arange(stop=t_final, step=delta_t)
r_values = np.linspace(0, 2, 10)
# init_state = [

#     20000,  # Quiescent HSPCs
#     0,      # Proliferating HSPCs
#     0,      # PAMPs (Pathogens)
#     10000,      # Pro-inflammatory Cytokines
#     10000,      # Anti-inflammatory Cytokines
#     10000,  # Stem Cell Supporting Factors
#     0,      # DAMPs (Tissue Damage)
#     0,      # Activated leukocytes
#     1,   # Stable leukocytes
#     0       # Suppressor leukocytes

# ]

parameters = {

    'k_H' : 3,
    'dH' : 0.05,
    'theta_N' : 2000,
    'theta_K' : 5000,
    'tau_Q' : 1,
    'tau_U' : 1,
    'd_SCSF' : 0.3,
    'd_S' : 0.7,
    'd_Q' : 0.9,
    'd_U' : 0.8,
    'd_P' : 0.95,
    'd_A' : 0.95,
    'g_N' : 0.10,
    'N_oo' : 2 * 10**7,
    'N_half' : 500,
    'S_PH' : 3,
    'S_PS' : 1,
    'S_PQ' : 5,
    'S_AU' : 7,
    'S_AH' : 3,
    'S_AS' : 1,
    'S_SCSF' : 10000,
    'S_KD' : 1,
    'k_sn' : 3,
    'k_nq' : 10,
    'k_ns' : 0.5,
    'R_KU' : 15,
    'I_crit' : 0.8,
    'K_crit' : 10000,
    'k' : 1,
    'A_crit' : 3,
    'psi' : 1/10

}

if bDerivatives:
    derivatives = np.zeros((runs, 10, len(timesteps)))

ext_stimuli = np.zeros((runs, num_outputs, len(timesteps)))

ext_stim_m = ['ADD', 'ADD', 'ADD', 'ADD', 'ADD', 'ADD', 'ADD', 'ADD', 'ADD', 'ADD']

outputs = np.zeros((runs, num_outputs, len(timesteps)))

init_state = [

    11100,  # Quiescent HSPCs
    1000,      # Proliferating HSPCs
    15000,      # PAMPs (Pathogens)
    1000,      # Pro-inflammatory Cytokines
    1000,      # Anti-inflammatory Cytokines
    32000,  # Stem Cell Supporting Factors
    0,      # DAMPs (Tissue Damage)
    1,      # Activated leukocytes
    10,   # Stable leukocytes
    0.5       # Suppressor leukocytes

    ]

def bifurcation_search(y, x, max_iter, variable, x_base, convergence):
    '''
    input:
    x = the upper bound of the variable starting guess
    y = the lower bound of the variable starting guess
    max_iter = the amount of iterations the method will run
    variable = index of what varibale you want to use
    x_base = initial variable values
    upper_convergence = lowerbound guess for upper convergence of chosen variable
    lower_convergence = upperbound guess for lower convergence of chosen variable

    output:
    result = the value where variable results in a bifurcation after max_iter cycles
    '''
    z = (x + y)/2
    x0 = x_base
   
    data = PL.lin_sim(PL.model_2_derivatives, parameters, init_state, t_final, delta_t, ext_stimuli[0], ext_stim_m, return_derivatives=bDerivatives)
    model_output_x = data[0]
   
    x0[variable] = y
    data = PL.lin_sim(PL.model_2_derivatives, parameters, init_state, t_final, delta_t, ext_stimuli[0], ext_stim_m, return_derivatives=bDerivatives)
    model_output_y = data[0]

    if model_output_x[2][60000] > model_output_y[2][60000]:
        default_case = True
    else:
        default_case = False

    print("initial f(x): ", model_output_x[2][60000])
    print("initial f(y): ", model_output_y[2][60000])

    for i in range(max_iter):
            print("completed run", i)
            x0[variable] = z
            print(x0)
            data = PL.lin_sim(PL.model_2_derivatives, parameters, init_state, t_final, delta_t, ext_stimuli[0], ext_stim_m, return_derivatives=bDerivatives)
            model_output = data[0]
            print(z)
            if default_case:
                if model_output[2][60000] > convergence:
                    x = z
                    z = (x + y) / 2
                elif model_output[2][60000] < convergence:
                    y = z
                    z = (x + y) / 2
            else:
                if model_output[2][60000] < convergence:
                    x = z
                    z = (x + y) / 2
                elif model_output[2][60000] > convergence:
                    y = z
                    z = (x + y) / 2
    return z

start = time.time()
result = bifurcation_search(0, 100000, 10, 2, init_state, 5000)
end = time.time()
print(f'Execution successful. Time elapsed: {end-start}s')
print(result)