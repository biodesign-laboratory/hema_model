using ReachabilityAnalysis, Symbolics  # !jl
using Plots, Plots.PlotMeasures, LaTeXStrings, OrdinaryDiffEq

# Extract rates into individual variables
w = 0.0005
P_crit = 7000
A_crit = 1000
t_half_leukocytes = 7
t_half_P = 4.1375
t_half_A = 7
t_double_P = 15
gamma = 0.0000001
S_a = 1
S_n = 1
N_inf = 20000000
S_PQ = 0.33
S_PH = 0.01
S_PS = 0.02
S_AS = 0.04
S_AH = 0.01
S_AU = 0.33
theta_ps = 10000000
theta_ar = 10000000
theta_AS = 10000000
theta_UP = 10000000
Immune_start = 500
Active_start = 500
Immune_crit = 2500
Active_crit = 2500
y = 2500
d_s = 1/70
d_p = 1/4
d_a = 1/4
d_q = 1/4
d_u = 0.05
g_N = 0.2
K_PS = 0.7
K_AQ = 0.7
K_PU = 0.7
K_AS = 0.7
k_nq = 0.85
k_ns = 0.2
k_tn = 0.33
H = 1000
N_func = 0.0
P = 600
A = 1160
T = 7000
a = 0.00
b = 1
e = 0.00
E_star = 1
H_0 = 1000
N_0 = 0.0
P_0 = 600
A_0 = 1160
T_0 = 7000
a_0 = 0.00
b_0 = 1
e_0 = 0.00
E_star_0 = 1

# Calculate nodes based on the extracted variables
Q = a * T
S = b * T
U = e * T


const mu = 3.986e14 * 60^2
const r = 42164.0e3
const r² = r^2
const mc = 500.0
const n² = mu / r^3
const n = sqrt(n²)

const two_n = 2 * n
const mu_r² = mu / r²

const K₁ = [-28.8287 0.1005 -1449.9754 0.0046 0.0;
            -0.087 -33.2562 0.00462 -1451.5013 0.0]
const K₂ = [-288.0288 0.1312 -9614.9898 0.0 0.0;
            -0.1312 -288.0 0.0 -9614.9883 0.0]

const K₁mc = K₁ / mc
const K₂mc = K₂ / mc

function mymul!(v, A, x)  # helper function for matrix-vector multiplication
    @inbounds for ind in eachindex(v)
        v[ind] = zero(x[1])
        for jind in eachindex(x)
            v[ind] += A[ind, jind] * x[jind]
        end
    end
    return nothing
end;

@taylorize function immune_under!(du, u, p, time)
    H, N = u

    E = 1
    Renewal = (0.35 * ((P + S_n * N - S_a * A)/P_crit)) * H
    D = (0.35 * ((P + S_n * N - S_a * A)/P_crit)) * H

    # H'
    du[1] = E * (Renewal + H) - D

    # N'
    du[2] = g_n * N - (k_nq * Q + k_ns * S) * (1-1/N_inf)

    return du
end

@taylorize function immune_over!(du, u, p, time)
    H, N = u

    E = 2 - (2/(1+(-1 * y * (P + S_n * N - S_a * A - P_crit))))
    Renewal = 0.35 * H
    D = 0.35 * H

    # H'
    du[1] = E * (Renewal + H) - D

    # N'
    du[2] = g_n * N - (k_nq * Q + k_ns * S) * (1-1/N_inf)

    return du
end

@taylorize function immune_zero!(du, u, p, time)
    H, N = u

    E = 1
    Renewal = 0
    D = 0

    # H'
    du[1] = E * (Renewal + H) - D

    # N'
    du[2] = g_n * N - (k_nq * Q + k_ns * S) * (1-1/N_inf)

    return du

    return du
end


const var = @variables H, N

#= function immune_system()
    n = 2  # number of variables

    automaton = GraphAutomaton(3)

    # mode 1 (zero)
    invariant = ReachabilityAnalysis.HalfSpace(H <= 0, var)
    zero = @system(H' = immune_zero!(H), dim:2, H ∈ invariant)

    # mode 2 (under)
    invariant = ReachabilityAnalysis.HalfSpace(H <= 7000, var)
    under = @system(H' = immune_under!(H), dim:2, H ∈ invariant)

    # mode 3 (over)
    invariant = ReachabilityAnalysis.HalfSpace(H >= 70000, var)
    over = @system(H' = immune_over!(H), dim:2, H ∈ invariant)

    # transition "zero" -> "under"
    guard1 = ReachabilityAnalysis.HalfSpace(H >= 0, var)
    t1 = @map(H -> H, dim:n, H ∈ guard1)
    add_transition!(automaton, 1, 2, t1)

    # transition "under" -> "over"
    guard2 = ReachabilityAnalysis.HalfSpace(H >= 7000, var)
    t2 = @map(H -> H, dim:n, H ∈ guard2)
    add_transition!(automaton, 2, 3, t2)

    Hybrid = HybridSystem(; automaton=automaton,
                     modes=[zero, under, over],
                     resetmaps=[t1, t2])

    # initial condition in mode 1
    #X0 = Zonotope([0.0, 0.0], [0.0 1000.0; 0.0 500.0])
    X0 = Hyperrectangle([500.0, 250.0], [500.0, 250.0])
    init = [(1, X0)]

    return InitialValueProblem(Hybrid, init)
end; =#

const var = @variables x y vx vy t

function immune_system(; abort_time=(120.0, 150.0))
    n = 4 + 1  # number of variables
    t_abort_lower, t_abort_upper = abort_time

    automaton = GraphAutomaton(3)

    # mode 1 (approaching)
    invariant = ReachabilityAnalysis.HalfSpace(x <= -100, var)
    approaching = @system(x' = immune_zero!(x), dim:5, x ∈ invariant)

    # mode 2 (rendezvous attempt)
    invariant = ReachabilityAnalysis.HalfSpace(x >= -100, var)
    attempt = @system(x' = immune_under!(x), dim:5, x ∈ invariant)

    # mode 3 (aborting)
    invariant = Universe(n)
    aborting = @system(x' = immune_over!(x), dim:5, x ∈ invariant)

    # transition "approach" -> "rendezvous attempt"
    add_transition!(automaton, 1, 2, 1)
    guard = ReachabilityAnalysis.HalfSpace(x >= -100, var)
    t1 = @map(x -> x, dim:n, x ∈ guard)

    # transition "approach" -> "abort"
    add_transition!(automaton, 1, 3, 2)
    guard_time = HPolyhedron([t >= t_abort_lower, t <= t_abort_upper], var)
    t2 = @map(x -> x, dim:n, x ∈ guard_time)

    # transition "rendezvous attempt" -> "abort"
    add_transition!(automaton, 2, 3, 3)
    t3 = @map(x -> x, dim:n, x ∈ guard_time)

    H = HybridSystem(; automaton=automaton,
                     modes=[approaching, attempt, aborting],
                     resetmaps=[t1, t2, t3])

    # initial condition in mode 1
    X0 = Hyperrectangle([-900.0, -400, 0, 0, 0], [25.0, 25, 0, 0, 0])
    init = [(1, X0)]

    return InitialValueProblem(H, init)
end;

function solve_immune(prob; k=25, s=missing)
   # transition from mode 1 to mode 2
    sol12 = solve(prob;
                  tspan=(0.0, 200.0),
                  alg=TMJets21a(; abstol=1e-5, maxsteps=10_000, orderT=5, orderQ=1,
                                disjointness=BoxEnclosure()),
                  max_jumps=1,
                  intersect_source_invariant=false,
                  intersection_method=TemplateHullIntersection(BoxDirections(5)),
                  clustering_method=LazyClustering(1),
                  disjointness_method=BoxEnclosure())
    sol12jump = overapproximate(sol12[1], Zonotope)
    t0 = tstart(sol12jump[1])
    sol12jump_c = cluster(sol12jump, 1:length(sol12jump), BoxClustering(k, s))

    # transition from mode 2 to mode 3
    H = system(prob)
    sol3 = solve(IVP(mode(H, 3), [set(X) for X in sol12jump_c]);
                 tspan=(t0, 200.0),
                 alg=TMJets21a(; abstol=1e-10, orderT=7, orderQ=1, disjointness=BoxEnclosure()))
    d = Dict{Symbol,Any}(:loc_id => 3)
    F12 = [fp for fp in sol12.F]
    F23 = [Flowpipe(fp.Xk, d) for fp in sol3.F]
    return HybridFlowpipe(vcat(F12, F23))
end

prob = immune_system()
sol = solve_immune(prob; k=25, s=missing)
solz = overapproximate(sol, Zonotope);

fig = plot(solz; vars=(0, 1), xlab="x", ylab="y")
